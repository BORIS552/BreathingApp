{
       		this.state.breathe_in_status ?
       		<strong>Breathe IN
       		<br/><CountUp end={5} delay={1} duration={6}/></strong>
       		:
       		<strong>HOLD
       		<br/><CountUp end={5} delay={2} duration={10} /></strong>
       		}


       		{count}
        <ReactInterval timeout={1000} enabled={true}
          callback={() => this.setState({count: this.state.count + 1})} />




          if(this.state.count <= 5 && this.state.count >= 0){
			this.setState({ breathe_status: 'BREATHE IN'});
			if( this.state.dcount == 5){
				this.setState({ dcount: 0});
			}
		}
		else if( this.state.count >=6 && this.state.count <= 9){
			this.setState({ breathe_status: 'HOLD'});
			if(this.state.dcount == 9){
				this.setState({ dcount: 0});
			}
		else if( this.state.count >=10 && this.state.count <= 14){
			this.setState({ breathe_status: 'BREATHE OUT'});
			if(this.state.dcount == 14){
				this.setState({ dcount: 0});
			}
		}else if( this.state.count >=15 && this.state.count <= 18){
			this.setState({ breathe_status: 'HOLD'});
			if(this.state.dcount == 18){
				this.setState({ dcount: 0});
			}
		}
		}else if(this.state.count >= 19) {
			this.setState({ count: 0});
			this.setState({dcount: 0});
		}



		<div className="watch-face">
			  <div className="circle"></div>
			  <div className="circle"></div>
			  <div className="circle"></div>
			  <div className="circle"></div>
			  <div className="circle"></div>
			  <div className="circle"></div>
			  
			</div>


	<button className="mute" onClick={this.pauseAudio}><img src={"/assets/mute.png"}/></button>








#breathing-button {
    width: 200px;
    height: 200px;
    padding: 20px;
    margin: 50px auto;
    -webkit-animation: breathing 7s ease-out infinite normal;
    animation: breathing 7s ease-out infinite normal;
    font-size: 24px;
    background: #5885cb;
    color: #fff;
    -webkit-font-smoothing: antialiased;
    border-radius: 500px;
    text-align: center;    
    }


@-webkit-keyframes breathing {
  0% {
    -webkit-transform: scale(0.9);
    transform: scale(0.9);
  }

  25% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }

  60% {
    -webkit-transform: scale(0.9);
    transform: scale(0.9);
  }

  100% {
    -webkit-transform: scale(0.9);
    transform: scale(0.9);
  }
}

@keyframes breathing {
  0% {
    -webkit-transform: scale(0.9);
    -ms-transform: scale(0.9);
    transform: scale(0.9);
  }

  25% {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }

  60% {
    -webkit-transform: scale(0.9);
    -ms-transform: scale(0.9);
    transform: scale(0.9);
  }

  100% {
    -webkit-transform: scale(0.9);
    -ms-transform: scale(0.9);
    transform: scale(0.9);
  }
}





















.watch-face {
  height: 125px;
  width: 125px;
  animation: pulse 4s cubic-bezier(0.5, 0, 0.5, 1) alternate infinite;
}

.circle {
  height: 125px;
  width: 125px;
  border-radius: 50%;
  position: absolute;
  mix-blend-mode: screen;
  transform: translate(0, 0);
  animation: center 6s infinite;
}

.circle:nth-child(odd) {
  background: #61bea2;
}

.circle:nth-child(even) {
  background: #529ca0;
}

.circle:nth-child(1) {
  animation: circle-1 4s ease alternate infinite;
}

.circle:nth-child(2) {
  animation: circle-2 4s ease alternate infinite;
}

.circle:nth-child(3) {
  animation: circle-3 4s ease alternate infinite;
}

.circle:nth-child(4) {
  animation: circle-4 4s ease alternate infinite;
}

.circle:nth-child(5) {
  animation: circle-5 4s ease alternate infinite;
}

.circle:nth-child(6) {
  animation: circle-6 4s ease alternate infinite;
}

@keyframes pulse {
  0% {
    transform: scale(.15) rotate(180deg);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes circle-1 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(-35px, -50px);
  }
}

@keyframes circle-2 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(35px, 50px);
  }
}

@keyframes circle-3 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(-60px, 0);
  }
}

@keyframes circle-4 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(60px, 0);
  }
}

@keyframes circle-5 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(-35px, 50px);
  }
}

@keyframes circle-6 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(35px, -50px);
  }
}


if( this.state.play && this.state.toggle == 0) {
			console.log("Play clicked");
			const mytrack = document.getElementById('myAudio');
			(mytrack as HTMLAudioElement).play();
			this.setState({ toggle: 1});
		}


		
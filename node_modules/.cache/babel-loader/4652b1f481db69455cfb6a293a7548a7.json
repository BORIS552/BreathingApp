{"ast":null,"code":"var _jsxFileName = \"/Users/isel2/Desktop/projects/BreathingApp/src/components/ExploreContainer.tsx\";\nimport React, { useState, useEffect } from \"react\";\n\nconst useMultiAudio = urls => {\n  const [sources] = useState(urls.map(url => {\n    return {\n      url,\n      audio: new Audio(url)\n    };\n  }));\n  const [players, setPlayers] = useState(urls.map(url => {\n    return {\n      url,\n      playing: false\n    };\n  }));\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex(p => p.playing === true);\n\n    if (currentIndex !== -1 && currentIndex !== targetIndex) {\n      newPlayers[currentIndex].playing = false;\n      newPlayers[targetIndex].playing = true;\n    } else if (currentIndex !== -1) {\n      newPlayers[targetIndex].playing = false;\n    } else {\n      newPlayers[targetIndex].playing = true;\n    }\n\n    setPlayers(newPlayers);\n  };\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      players[i].playing ? source.audio.play() : source.audio.pause();\n    });\n  }, [sources, players]);\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      source.audio.addEventListener(\"ended\", () => {\n        const newPlayers = [...players];\n        newPlayers[i].playing = false;\n        setPlayers(newPlayers);\n      });\n    });\n    return () => {\n      sources.forEach((source, i) => {\n        source.audio.removeEventListener(\"ended\", () => {\n          const newPlayers = [...players];\n          newPlayers[i].playing = false;\n          setPlayers(newPlayers);\n        });\n      });\n    };\n  }, []);\n  return [players, toggle];\n};\n\nconst ExploreContainer = ({\n  urls\n}) => {\n  const [players, toggle] = useMultiAudio(urls);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, players.map((player, i) => /*#__PURE__*/React.createElement(Player, {\n    key: i,\n    player: player,\n    toggle: toggle(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst Player = ({\n  player,\n  toggle\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }\n}, \"Stream URL: \", player.url), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: toggle,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }\n}, player.playing ? \"Pause\" : \"Play\"));\n\nexport default ExploreContainer;","map":{"version":3,"sources":["/Users/isel2/Desktop/projects/BreathingApp/src/components/ExploreContainer.tsx"],"names":["React","useState","useEffect","useMultiAudio","urls","sources","map","url","audio","Audio","players","setPlayers","playing","toggle","targetIndex","newPlayers","currentIndex","findIndex","p","forEach","source","i","play","pause","addEventListener","removeEventListener","ExploreContainer","player","Player"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst useMultiAudio = urls => {\n  const [sources] = useState(\n    urls.map(url => {\n      return {\n        url,\n        audio: new Audio(url)\n      };\n    })\n  );\n\n  const [players, setPlayers] = useState(\n    urls.map(url => {\n      return {\n        url,\n        playing: false\n      };\n    })\n  );\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex(p => p.playing === true);\n    if (currentIndex !== -1 && currentIndex !== targetIndex) {\n      newPlayers[currentIndex].playing = false;\n      newPlayers[targetIndex].playing = true;\n    } else if (currentIndex !== -1) {\n      newPlayers[targetIndex].playing = false;\n    } else {\n      newPlayers[targetIndex].playing = true;\n    }\n    setPlayers(newPlayers);\n  };\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      players[i].playing ? source.audio.play() : source.audio.pause();\n    });\n  }, [sources, players]);\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      source.audio.addEventListener(\"ended\", () => {\n        const newPlayers = [...players];\n        newPlayers[i].playing = false;\n        setPlayers(newPlayers);\n      });\n    });\n    return () => {\n      sources.forEach((source, i) => {\n        source.audio.removeEventListener(\"ended\", () => {\n          const newPlayers = [...players];\n          newPlayers[i].playing = false;\n          setPlayers(newPlayers);\n        });\n      });\n    };\n  }, []);\n\n  return [players, toggle];\n};\n\nconst ExploreContainer = ({ urls }) => {\n  const [players, toggle] = useMultiAudio(urls);\n\n  return (\n    <div>\n      {players.map((player, i) => (\n        <Player key={i} player={player} toggle={toggle(i)} />\n      ))}\n    </div>\n  );\n};\n\nconst Player = ({ player, toggle }) => (\n  <div>\n    <p>Stream URL: {player.url}</p>\n    <button onClick={toggle}>{player.playing ? \"Pause\" : \"Play\"}</button>\n  </div>\n);\n\nexport default ExploreContainer;\n"]},"metadata":{},"sourceType":"module"}